# Projeto 4 - MLOps NÃ­vel 3 - AutomaÃ§Ã£o das OperaÃ§Ãµes de CI/CD no Pipeline de Machine Learning e IA

## Estrutura do Projeto
```
cap10/
â”‚â”€â”€ .github/
â”‚   â””â”€â”€ workflows/
â”‚       â””â”€â”€ mlops-pipeline.yml    			# Arquivo do GitHub Actions para automaÃ§Ã£o
â”‚
â”œâ”€â”€ artefatos/                    			# Armazena modelos treinados e objetos de prÃ©-processamento
â”‚   â”œâ”€â”€ optimized_xgboost_model.pkl
â”‚   â”œâ”€â”€ scaler.pkl
â”‚   â”œâ”€â”€ label_encoders.pkl
â”‚   â”œâ”€â”€ imputer_num.pkl
â”‚
â”œâ”€â”€ config/                       			# Arquivos de configuraÃ§Ã£o
â”‚   â”œâ”€â”€ config.yaml               			# HiperparÃ¢metros de modelo e prÃ©-processamento
â”‚   â”œâ”€â”€ logging.yaml              			# ConfiguraÃ§Ãµes de log
â”‚
â”œâ”€â”€ dados/                         			# Dados brutos e processados
â”‚   â”œâ”€â”€ brutos/
â”‚   â”‚   â”œâ”€â”€ dataset.csv
â”‚   â”œâ”€â”€ processados/
â”‚   â”‚   â”œâ”€â”€ dados_treino.csv
â”‚   â”‚   â”œâ”€â”€ dados_teste.csv
â”‚
â”œâ”€â”€ pipeline/                          		# CÃ³digo-fonte para pipeline de ML modularizado
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ dsa_preprocessa_dados.py     		# Manipulando valores ausentes, codificaÃ§Ã£o, dimensionamento
â”‚   â”œâ”€â”€ dsa_engenharia_atributos.py    		# SeleÃ§Ã£o de recursos, transformaÃ§Ã£o
â”‚   â”œâ”€â”€ dsa_otimiza_hiperparametros.py  	# RandomizedSearchCV para ajuste de hiperparÃ¢metros
â”‚   â”œâ”€â”€ dsa_treina_modelo.py         		# Treinamento de modelo de ML
â”‚   â”œâ”€â”€ dsa_avalia_modelo.py         		# AvaliaÃ§Ã£o de modelo e anÃ¡lise residual
â”‚   â”œâ”€â”€ dsa_salva_artefatos.py         		# Salvar modelo e artefatos de prÃ©-processamento
â”‚
â”œâ”€â”€ scripts/                      			# Scripts de automaÃ§Ã£o
â”‚   â”œâ”€â”€ dsa_automatiza_treino.py        	# Automatiza o pipeline de treinamento
â”‚   â”œâ”€â”€ dsa_automatiza_inferencia.py    	# Automatiza o pipeline de inferÃªncia (previsÃµes)
â”‚   â”œâ”€â”€ dsa_inferencia_app.py    			# Usado para previsÃµes na app
â”‚
â”œâ”€â”€ app/                          			# Deploy do modelo via app web
â”‚   â”œâ”€â”€ app.py                    			# Endpoint de inferÃªncia
â”‚   â”œâ”€â”€ templates/
â”‚       â””â”€â”€ index.html            			# PÃ¡gina HTML para inputs do usuÃ¡rio
â”‚
â”œâ”€â”€ tests/                        			# Testes unitÃ¡rios para o Pipeline CI/CD
â”‚   â”œâ”€â”€ dsa_testa_preprocessamento.py
â”‚   â”œâ”€â”€ dsa_testa_engenharia_atributos.py
â”‚   â”œâ”€â”€ dsa_testa_treinamento_modelo.py
â”‚
â”œâ”€â”€ Dockerfile                    			# Dockerfile para criaÃ§Ã£o de container
â”œâ”€â”€ requirements.txt              			# DependÃªncias
â”œâ”€â”€ LEIAME.txt                     			# DocumentaÃ§Ã£o do projeto
```


O objetivo de um Pipeline CI/CD (Continuous Integration / Continuous Deployment) Ã© automatizar o treinamento, testes e deploy do modelo de Machine Learning, garantindo que cada alteraÃ§Ã£o seja testada e implantada corretamente.

ðŸ”¹ O que o Pipeline irÃ¡ fazer?

CI (Continuous Integration)

- Rodar testes unitÃ¡rios (pytest)
- Rodar verificaÃ§Ãµes de estilo de cÃ³digo (flake8)
- Testar build do container (Docker)

CD (Continuous Deployment)

- Treinar (e retreinar) o modelo automaticamente
- Salvar os artefatos treinados 
- Atualizar e fazer deploy da API Flask
- Fazer deploy do container no Docker Hub (opcional)
- Deploy em AWS/GCP/Azure (opcional)

# Abra o terminal ou prompt de comando, navegue atÃ© a pasta com os arquivos e execute o comando abaixo para criar um ambiente virtual:

conda create --name dsap4 python=3.12

# Ative o ambiente:

conda activate dsap4 (ou: source activate dsap4)

# Instale o pip e as dependÃªncias:

conda install pip
pip install -r requirements.txt 

# Execute os os comandos abaixo:

python scripts/dsa_automatiza_treino.py
python scripts/dsa_automatiza_inferencia.py
pytest -v
python app/app.py
docker build -t projeto4-mlops .
docker run -d -p 5002:5002 --name dsa-mlops-p4 projeto4-mlops

# Siga as instruÃ§Ãµes no CapÃ­tulo 10 para configuraÃ§Ã£o do Github Actions.

# Use os comandos abaixo para desativar o ambiente virtual e remover o ambiente (opcional):

conda deactivate
conda remove --name dsap4 --all
